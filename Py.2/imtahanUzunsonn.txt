# 1

def sahetap(a,h):
    return 0.5 * a * h
# 2
# sozdeki herfleri gezirik ve bir sonraki herf evvelki herfnen eyni deyilse
# soze onu elave edirik. Sonda sozu return edirik
def tekrarsil(a):
    soz = "" 
    t = '' # evvelki herfi saxlayan deyisen
    for c in a: # sozdeki herfleri gezirik
        if c != t: # herfin evvelki herfle eyni olmadigini yoxlayiriq
            soz+=c # eyni deyilse soze elave edirik
        t = c # indiki herfi evvelki herf kimi yadda saxlayiriq
    return soz
# 3
# verilen ededi stringe cevirib stringin icerisinde butun reqemlerin
# varligini yoxlayiriq

def butunreqemler(eded):
    stringeded = str(eded) # stringe ceviririk
    olmayanededler = [] # bu listde verilen ededin icerisinde olmayan reqemleri saxlayaciyiq
    for i in range(1,10): # [1,9] araligini gezirik
        if not str(i) in stringeded: # reqemin ededin icerisinde olmadigini yoxlayiriq
            olmayanededler.append(i) # eger yoxdursa reqemi ededin icerisinde olmayan reqemler ucun ayirdigimiz liste elave edirik
    return olmayanededler
print(butunreqemler(98305614820698024492))

# 4

def nomre(a):
    emsal = 1
    if(a.startswith("10")): # startswith funksiyasi stringin ona verilen argumentle baslayib baslamadigina gor True ve ya False return edir 
        emsal = emsal + 2 # eger 10 la baslayirsa demeli Baki nomresidir emsala 2 elave edirik
    hisseler = a.split("-") # nomreni ni - ayiririq

    if(hisseler[1][0] == hisseler[1][1]): # nomrenin ikinci hissesi eyni herlerden ibaretdirse onda emsala 3 artiririq
        emsal = emsal + 3
    
    if(hisseler[2][0] == hisseler[2][1] == hisseler[2][2]): # nomrenin ucuncu hissesi hamsi eynidirse onda emsala 6 artiririq
        emsal = emsal + 6
    
    print(emsal*50)
nomre("10-UU-556")


# 5
# ededi onu teskil eden reqemlere ayirib toplamaliyiq. Ededi stringe cevirib bunu etmek olar.
def bolunen(a):
    reqemlercemi = 0 # ededin reqemleri cemini burada saxlayaciyiq
    for i in str(a): # ededin reqemlerini gezirik
        reqemlercemi = reqemlercemi + int(i) # reqemi int e cevirib reqemler cemine elave edirik
    if a%reqemlercemi == 0: # eger eded oz reqemler cemine qaliqsiz bolunurse
        return True # True return edirik
    return False # False return edirik
print(bolunen(131))

# 6

def addim(eded,saygac = 1):
    reqemler = [] # ededin reqemlerini saxladigimiz list
    for c in str(eded): # ededi gezirik
        reqemler.append(int(c)) # ededin reqemini reqemler listine elave edirik. ededi string kimi gezirik deye liste ededi elave etmeden evvel onu inte cevirmeliyik. int(c)
    reqemlerinhasili = 1
    for c in reqemler: # reqemler listinin icerisindeki reqemlerin hasilini tapiriq
        reqemlerinhasili = reqemlerinhasili * c
    if reqemlerinhasili in range(1,10): # eger hasil [1,9] arasindadirsa saygaci return edirik
        return saygac
    return addim(reqemlerinhasili,saygac + 1 ) # eger yuxaridaki sert odenmirse onda funksiyani yeniden cagiririq. Funksiyaya eded yerine reqemlerin hasilini veririk saygac yerine ise hal hazirki saygaci bir artirib veririk.
print(addim(77))
 # funksiya iki deyer alir: eded ve saygac. saygacin ilkin deyeri 1 olur.
 # funksiya ededin icerisindeki reqemlerin hasilini tapandan sonra hasilin
 # [1-9] araliginda olmasini yoxlayir(yeni hasilin reqem olmasini yoxlayir sertde deyilen kimi)
 # eger hasil reqemdirse onda saygacin deyerini return edirik. Eger reqem deyilse,
 # funksiyani yeniden cagirib deyer yerine hasili saygac yerine saygac + 1 gonderirik.
 # saygac emelliyyatlarin sayini ozunde saxliyir.

# 7

def tambolunen35():
    tambolunenededler = [] # 3 ve 5 tam bolunen ededleri saxladigimiz list
    for a in range(1,100): # 1 den 100 e qeder ededleri gezirik
        if a%3==0 and a%5==0: # eger 3 e ve 5 e boldukde qaliq 0 olursa onu tamboluned ededler listine elave edirik
            tambolunenededler.append(a)
    return tambolunenededler
print(tambolunen35())
    
# 8 
eded = int(input("eded daxil edin: ")) # istifadeciden eded aliriq
print(len(list(range(0,eded,2)))) # 0 dan baslayaraq istifadecinin daxil etdiyi edede qeder 2 artiraraq gedirik
                             # sonra bunu liste cevirib cap edirik. list()
# range(baslangic, son, addim)
# range funksiyasinda baslangic parametri hardan baslayacagini, son parametri hara qeder davam edeceyini
# addim ise her defe uzerine nece gelerek ilerileyeceyini gosterir
# range(0,10,2) 0 dan basla 10 qeder 2 artiraraq get. [0,2,4,6,8]
# range(10,15,1) 10 dan basla 15 qeder 1 artiraraq get [10,11,12,13,14,15]
# range(10,3,-1) 10 dan basla 3 qeder -1 artiraraq get [10,9,8,7,6,5,4]

# 9
m = [2,2,4,3,6,9,6,1,5,1] # siyahi verilib
# range(baslangic, son, addim)
# range funksiyasinda baslangic parametri hardan baslayacagini, son parametri hara qeder davam edeceyini
# addim ise her defe uzerine nece gelerek ilerileyeceyini gosterir
# range(0,10,2) 0 dan basla 10 qeder 2 artiraraq get. [0,2,4,6,8]
# range(10,15,1) 10 dan basla 15 qeder 1 artiraraq get [10,11,12,13,14,15]
# range(10,3,-1) 10 dan basla 3 qeder -1 artiraraq get [10,9,8,7,6,5,4]
for a in range(len(m)-1,-1,-1):
    if(m[a]>3):
        m.pop(a)
print(m)

# 10
# Mehsulu qiymeti en asagi olan vaxtda alib en yuxari olan vaxtda satsaq daha cox pul qazanariq
ayliqqiymetler = [136,151,125,119,146,133,118,106,138,136,127,101]
maxqiymet = max(ayliqqiymetler) # ayliq qiymetler siyahisindan maximum deyeri(qiymeti tapiriq)
minqiymet = min(ayliqqiymetler) # ayliq qiymetler siyahisindan minimum deyeri(qiymeti tapiriq)
# index funksiyasi ile qiymetlerin listdeki indexini tapiriq. Ustune bir elave edirik sonra
# cunki listlerde indexleme 0 dan baslayir.
maxqiymetayi = ayliqqiymetler.index(maxqiymet) + 1
minqiymetayi = ayliqqiymetler.index(minqiymet) + 1
print(str(minqiymetayi)+" ayda mali alib "+str(maxqiymetayi)+" ayda satmaq lazimdir")

# 11
for i in range(1,6):
    print((i*str(i)).center(5))

# 12
# fibonacci seriyasi: 0,1,1,2,3,5,8 
def fibonacci(eded,evvelkieded):
    if eded > 100:
        return
    print(eded)
    return fibonacci(eded+evvelkieded,eded)
fibonacci(1,0)
# 13
# ededleri istifadeci arasinda vergul olmaqla daxil edir: 1,2,3,4
# istifadeciden ededleri alib vergule gore ayiririq
ededler = input("ededleri daxil edin: ").split(",") 
cem = 0 # cemi saxlayacigimiz deyisen
for c in ededler: # ededleri gezirik. Ededler listinde stringler var. Ona gore ceme elave etmeden evvel inte cevirmeliyik
    cem += int(c) # inte cevirib ceme elave edirik
print(cem)

# 14

cumle = input("cumle daxil edin: ")
sozler = cumle.split(" ") # cumleni bosluqlara gore ayiririq. Yeni sozleri tapiriq
print(sozler[-1]) # sozlerdeki axrinci indexi (-1) cap edirik

# 15

ededler = input("Ededler daxil edin: ").split(",")
for a in ededler:
    print(a**2)

# 16

def bolunen35():
    tambolunenededler = [] # 3 e bolunub 5 e bolunmeyen ededleri saxladigimiz list
    for a in range(100,200): # 1 den 100 e qeder ededleri gezirik
        if a%3==0 and a%5 != 0: # eger 3 e ve 5 e boldukde qaliq 0 olursa onu tamboluned ededler listine elave edirik
            tambolunenededler.append(a)
    return len(tambolunenededler)
print(bolunen35())

# 17
# cumledeki herfleri bir bir gezirik. Eger herf saitler listine daxildirse onda saitlerinsayi deyisenini bir artiririq
saitler = ["a","ı","o","u","e","ə","i","ö","ü"]
saitlerinsayi = 0
cumle = input("cumle daxil edin: ")
for a in cumle: # herfleri gezirik
    if a in saitler: # eger herf saitler listinin icerisindedirse
        saitlerinsayi += 1
print(saitlerinsayi)

# 18

reqemlerimuxtelifeded = input("eded daxil edin: ") # eded istifadeciden alinir
for i in range(0,10): # [1,9] araligini gezirik ve her defe yoxlayiriq, eger reqem istifadecinin daxil etdiyi ededde deyilse onda onu print edirik
    if not str(i) in reqemlerimuxtelifeded:
        print(i)

# 19
cumle = input("Cumle: ") # cumle istifadeciden alinir
sozler = cumle.split(" ") # sozlere ayrilir
sozler = sozler[::-1] # sozler tersine cevrilir
print(sozler)

# 20
cumle = input("Cumle: ") # cumle istifadeciden alinir
sozler = cumle.split(" ") # sozlere ayrilir
enqisasoz = sozler[0] # ilk sozu helelik en qisa soz kimi secirik
for s in sozler: # sozleri gezirik
    if len(s) < len(enqisasoz): # eger sozun uzuluqu enqisa sozun uzunlugundan kicikdirse onda enqisasozu soze beraber edirik
        enqisasoz = s
print(enqisasoz)

# 21

cumle = input("Cumle daxil edin: ")
sozler = cumle.split(" ") # cumleni bosluqlara gore ayirib sozleri tapiriq
enuzunsoz = sozler[0] # helelik en uzun sozu birinci soz qebul edirik
for soz in sozler: # sozleri gezirik
    if len(soz) > len(enuzunsoz): # eger soz enuzunsozden uzundursa
        enuzunsoz = soz # enuzunsozu soze beraber edirik
print(enuzunsoz)

# 22

cumle = input("Cumle daxil edin: ")
sozler = cumle.split(" ") # cumleni bosluqlara gore ayirib sozleri tapiriq
print(len(sozler))

# 23

cumle = input("Cumle daxil edin: ")
sozler = cumle.split(" ") # cumleni bosluqlara gore ayirib sozleri tapiriq
dortheriflisozler = [] # dortherifle sozleri yerlesdireceyimiz list
for soz in sozler: # sozleri gezirik
    if len(soz) == 4: # sozun uzunluqu 4 e beraberdirse onu liste elave edirik
        dortheriflisozler.append(soz)
print(dortheriflisozler)

# 24

cumle = input("Cumle daxil edin: ")
sozler = cumle.split(" ") # cumleni bosluqlara gore ayirib sozleri tapiriq
xususisozler = [] # herfi baslayib m ile biten sozler
for a in sozler: # sozleri gezirik
    if a.startswith("a") and a.endswith("m"): # soz a ile baslayib b ile bitirse
        xususisozler.append(a) # xususi sozler listimize elave edirik
print(xususisozler)

# 25 

cumle = input("Cumle daxil edin: ")
sozler = cumle.split(" ") # cumleni bosluqlara gore ayirib sozleri tapiriq
xususisozler = [] # sonu lar ile biten sozler
for a in sozler: # sozleri gezirik
    if a.endswith("lar"): # soz  lar ile bitirse
        xususisozler.append(a) # xususi sozler listimize elave edirik
print(xususisozler)

# 26 : 22 ile eyni

# 27

setr = input("Setri daxil edin: ") 
boyukherfindexleri = [] # boyuk herf indexlerini saxladigimiz list
for i in range(0,len(setr)): # setrin terkibini indexleme ile gezirik
    if setr[i].isupper(): # eger hal hazirki herf boyuk hherfdirse onda onun indexini elave edirik
        boyukherfindexleri.append(i)
print(boyukherfindexleri)

# 28

setr = input("Setri daxil edin: ") 
def isogram(setr):
    evvelkiherfler = [] # bura setrdeki gezdiyimiz her herfi elave edeciyik
    for c in setr:
        if c in evvelkiherfler:
            return False
        evvelkiherfler.append(c)
    return True
print(isogram(setr))

# 29re
def convert(setr):
    boyuk_herf_sayi = 0
    kicik_herf_sayi = 0
    for a in setr: # setri gezirik
        if a.isupper(): # eger gezdiyimiz boyukherfdirse
            boyuk_herf_sayi += 1
        if a.islower(): # eger gezdiyimiz kicikherfdirse
            kicik_herf_sayi += 1

    # boyukherflerin sayi kicik herflerin sayindan azdirsa demeli
    # boyukherfleri kicikherflere cevirmek daha az operasiyada bas verer
    if boyuk_herf_sayi > kicik_herf_sayi:
        return kicik_herf_sayi
    return boyuk_herf_sayi

print(convert("abC"))
print(convert("abCBA"))

# 30
# Armstring ededi: ededlerin reqemlerinin reqemlerinin sayina olan
# 153 = 1^3 + 5^3 + 3^3

def armstrongnumber(eded):
    reqemler =  [int(a) for a in str(eded)]
    cem = 0
    for a in reqemler:
        cem += a**3
    if cem == eded:
        return True
    return False

print(armstrongnumber(152))

# 31

def polindromecheck(eded):
    if str(eded) == str(eded)[::-1]: # stringi tersine cevirmek ucun [::-1] istifade etmek olar
        # eger eded oz tersine beraberdirse onda palindromdur
        return True
    return False
print(polindromecheck(2872))

# 32

def artmasirasi(eded):
    reqemler = [int(a) for a in eded] # eded reqemlerine bolunur, int-e cevirib listde saxlayiriq
    return reqemler == sorted(reqemler) # reqemlerin siralanmis listinin reqemlerin ozune beraber oldugunu yoxlatiriq. Yeni reqemlerin sirali olub olmadigini bilmek isteyirik
print(artmasirasi((input("Eded: "))))

# 33

def ozreqemlerinebolunur():
    eded = input("Eded daxil edin: ") # eded istifadeciden alinir ve 
    reqemler = [int(a) for a in eded] # eded reqemlerine bolunur, int-e cevirib listde saxlayiriq
    for a in reqemler: # reqemleri gezirik
        if int(eded) % a != 0: # eger eded reqeme bolundukde qaliq 0 olmursa demeli, eded hemin reqeme bolunmur. false return edirik
            return False
    return True # eger butun ededleri yoxladiqsa(dovr bitdi) ve false return olunmadisa demeli eded butun reqemlerine qaliqsiz bolunur ve True return ede bilerik
print(ozreqemlerinebolunur())

# 34


def cutreqemlersil():
    eded = input("Eded daxil edin: ") # eded istifadeciden alinir ve 
    reqemler = [a for a in eded] # eded reqemlerine bolunur, int-e cevirib listde saxlayiriq
    for a in range(len(reqemler)-1,-1,-1): # reqemleri sondan gezirik
        if int(reqemler[a]) % 2 == 0: # eger reqem cutdurse onu reqemler siyahisindan silirk
            reqemler.pop(a)
    return " ".join(reqemler)
print(cutreqemlersil())

# 35

def NOYES():
    eded = input("Eded daxil edin: ") # eded istifadeciden alinir ve 
    reqemler = [a for a in eded] # eded reqemlerine bolunur, int-e cevirib listde saxlayiriq
    dictionary = dict.fromkeys(reqemler,0) # reqemleri key olan ve deyerleri 0 olan dictionary yaradariq
    for a in reqemler: # reqemleri gezirik
        dictionary[a] += 1 # herdefe reqemin dictionarydeki deyerini bir artiririq
    for a in dictionary.values():
        if a != 1:
            return "NO"
    return "YES"

print(NOYES())

# 36
def dayaqNoqtesi(list):
    for a in range(1,len(list)): # listin indexini gezirik
        if sum(list[:a]) == sum(list[a+1:]): # eger indexin solundaki hissenin cemi sagindaki hissenin cemine beraber olarsa
            return list[a]
print(dayaqNoqtesi([9,1,9]))

# 37

def fibonacci(vereded,eded=1,evvelkieded=0):
    if eded > vereded:
        return
    print(eded)
    return fibonacci(vereded,eded+evvelkieded,eded)
fibonacci(10)

# 38

def myFunction(soz,herfler):
    for a in soz:
        if a not in herfler:
            soz = soz.replace(a,"-")
    print(soz)
myFunction("helicopter",["o","e","s"])

# 39 

eded = int(input("Eded daxil edin: "))
hasil = 1
for i in range(1,eded):
    if i % 7 == 0:
        hasil *= i
print(hasil)

# 40

eded = int(input("Eded daxil edin: "))
siyahi = []
for a in range(1,eded):
    if str(a).endswith("3"):
        siyahi.append(a)
print(siyahi)

# 41

eded = int(input("Eded daxil edin: "))
siyahi = []
for a in range(1,eded):
    if str(a).endswith("3"):
        siyahi.append(a)
print(siyahi)

# 42

cumle = input("Cumleni daxil edin: ")
dordheriflisozsayi = 0
for a in cumle.split(" "): # sozleri gezirik
    if len(a) == 4: # uzunluqu 4 durse deyisenin deyerini bir artiririq
        dordheriflisozsayi += 1
print(dordheriflisozsayi) 

# 43

cumle = input("Cumleni daxil edin: ")
sonularilebiten = 0 # sonu lar ile biten sozlerin sayini saxladigimiz deyisen
for a in cumle.split(" "): # cumledeki sozleri gezirik
    if a.endswith("lar"): # sonu lar ile bitirse
        sonularilebiten += 1 # deyisenin  deyerini bir artiririq
print(sonularilebiten)